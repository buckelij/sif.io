# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login
# az aks create \
#     --resource-group sif_group \
#     --name sifio \
#     --location westus3 \
#     --node-count 1 \
#     --node-vm-size "Standard_B2s" \
#     --load-balancer-sku basic

name: Build and deploy smtp.sif.io to AKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "sifiocr"
  CONTAINER_NAME: "sifio-smtp"
  RESOURCE_GROUP: "sif_group"
  CLUSTER_NAME: "sifio"
  IMAGE_PULL_SECRET_NAME: "sifio-github-actions-secret"
  DEPLOYMENT_MANIFEST_PATH: "config/smtp/production.yml"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v4
    
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v2.1.1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    # Builds and pushes an image up to your Azure Container Registry
    - name: Build and push image to ACR
      run: |
        az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --file config/smtp/Dockerfile .

  createSecret:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v2.1.1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v4.0.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # Retrieves the credentials for pulling images from your Azure Container Registry
    - name: Get ACR credentials
      run: |
        az acr update -n ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
        echo "::add-mask::${ACR_USERNAME}"
        echo "::set-output name=username::${ACR_USERNAME}"
        echo "::add-mask::${ACR_PASSWORD}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
    - name: Create K8s secret for pulling image from ACR
      uses: Azure/k8s-create-secret@v5.0.0
      with:
        container-registry-url: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
        container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
        secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }}  

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage, createSecret]
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v3
    
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v2.1.1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v4.0.0
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # Modifies the manifest file to use the github sha as the image tag
    - name: Update manifest with image tag
      run: sed -i'' 's/GITHUB.SHA/${{ github.sha }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    # Modifies manifest to set INJECTED values from GitHub secrets
    - name: Set ENV blob account
      run: sed -i'' 's/INJECTED_BLOB_ACCOUNT/${{ secrets.INJECTED_BLOB_ACCOUNT }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    - name: Set ENV blob container
      run: sed -i'' 's/INJECTED_BLOB_CONTAINER/${{ secrets.INJECTED_BLOB_CONTAINER }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    - name: Set ENV blob key
      run: sed -i'' 's/INJECTED_BLOB_KEY/${{ secrets.INJECTED_BLOB_KEY }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    - name: Set ENV mx domains
      run: sed -i'' 's/INJECTED_MX_DOMAINS/${{ secrets.INJECTED_MX_DOMAINS }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    - name: Set ENV xsrf secret
      run: sed -i'' 's/INJECTED_XSRF_SECRET/${{ secrets.INJECTED_XSRF_SECRET }}/' ${{ env.DEPLOYMENT_MANIFEST_PATH }}

    # Deploys application based on given manifest file
    - name: Deploys application
      uses: Azure/k8s-deploy@v5
      with:
        action: deploy
        manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.IMAGE_PULL_SECRET_NAME }}
